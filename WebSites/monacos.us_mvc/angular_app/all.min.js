var AngularApplication = angular.module("monacos.us", []);

//AngularApplication.constant('rootUrl', "http://localhost/monacos_us_mvc");
//AngularApplication.constant('rootUrl', "http://localhost:1477/");
AngularApplication.constant('rootUrl', "http://www.monacos.us");




(function () {

    'use strict'

    AngularApplication.component("dateTimeDisplayComponent",
        {
            templateUrl: function (rootUrl) { return rootUrl + '/angular_app/components/views/date_time_display_component.html' },
            bindings: {},
            controller: ["$scope", "$log", "timer_service", date_time_display_component_ctrl],
            controllerAs: "ctr"
        }
    );


    
    function date_time_display_component_ctrl($scope, $log, timer_service) {


            $scope.Date_Display_Value = "";
            $scope.Time_Display_Value = "";

            $scope.timer_time_obj = null;
            $scope.timer_date_obj = null;




            var dayarray = new Array("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday");
            var montharray = new Array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December");

         

            this.gettheTime = function () {

                var mydate = new Date();
                var hours = mydate.getHours();
                var minutes = mydate.getMinutes();
                var seconds = mydate.getSeconds();
                var display_time = "";
                var dn = "AM";

                if (hours >= 12) {
                    dn = "PM";
                }
                if (hours > 12) {
                    hours = hours - 12;
                }
                if (hours == 0) {
                    hours = 12;
                }
                if (minutes <= 9) {

                    minutes = "0" + minutes;
                }
                if (seconds <= 9) {
                    seconds = "0" + seconds;
                }
                

                display_time = hours + ":" + minutes + ":" + seconds + " " + dn;

                $scope.Time_Display_Value = display_time;

               
                //$log.debug("1");
               
                
            }

            this.gettheDate = function () {

                var mydate = new Date();
                var year = mydate.getYear();
                var day = mydate.getDay();
                var month = mydate.getMonth();
                var daym = mydate.getDate();
                var display_date = "";



                if (year < 1000) {
                    year += 1900;
                }
                if (daym < 10) {
                    daym = "0" + daym;
                }

                display_date = dayarray[day] + ", " + montharray[month] + " " + daym + ", " + year;

                $scope.Date_Display_Value = display_date;

                //$log.debug("2");

            }

           
            this.$onInit = function()
            {

                this.gettheDate();


                $scope.timer_time_obj = timer_service(this.gettheTime, 1000);

                $scope.timer_time_obj.start();






                $scope.timer_date_obj = timer_service(this.gettheDate, 60000);

                $scope.timer_date_obj.start();


            }
            
    }


})();

(function () {

    'use strict'

    AngularApplication.component("loginStatusComponent",
        {

            templateUrl: function (rootUrl) { return rootUrl + "/angular_app/components/views/login_status_component.html" },
            bindings: {},
            controller: ["$scope", "$log", "utility_service", "security_service", "navigation_service", login_status_component_ctrl],
            controllerAs: "ctr"
        } 

    );


    function login_status_component_ctrl($scope, $log, utility_service, security_service, navigation_service) {


        function DisplayLoginStatus(bolLoggedInStatus) {


            if (bolLoggedInStatus) {

                $("#a_signin").hide();
                $("#a_signout").show();

            }
            else {

                $("#a_signin").show();
                $("#a_signout").hide();

            }


        }

         
        function LogStatusDisplay() {

            var bolLoggedInStatus = false;
            var Result = null;


            try {


                Result  = security_service.GetLoggedInStatus();

                if (Result.status == "success")
                {

                    bolLoggedInStatus = Result.data;

                    DisplayLoginStatus(bolLoggedInStatus);

                }
                else
                {

                    utility_service.ExceptionPopUpDialog("LogStatusDisplay", "An error occured: " + Request.description, 5);


                }

               
            }
            catch (e) {

                $exceptionHandler(ex.message, "LogStatusDisplay")
                utility_service.ExceptionPopUpDialog("LogStatusDisplay : ", "An error occured: " + ex.message, 5);


            }

        }


       


       
            // Event Handler
            this.LoginEvent = function () {


                DisplayLoginStatus(true);


            }

            // Event Handler
            this.LogoutEvent = function () {


               DisplayLoginStatus(false);



            }
         

            $scope.LogoutUser = function () {
                
                var Result = null;
                var LoggedOut = false;


                try
                {

                    Result = security_service.LogoutUser();

                    if (Result.status == "success") {

                        LoggedOut = Request.data;

                        if (LoggedOut == true) {

                            utility_service.NotificationPopupDialog("Logout", "You are now Logged out.", 3);

                        }
                        else
                        {
                            utility_service.NotificationPopupDialog("Logout", "Logout Unsuccessful", 3);

                        }


                    }
                    else
                    {
                        utility_service.ExceptionPopUpDialog("LogoutUser", "An error occured: " + Result.description, 5);

                    }

                }
                catch(ex)
                {
                    $exceptionHandler(ex.message, "LogoutUser")
                    utility_service.ExceptionPopUpDialog("LogoutUser : ", "An error occured: " + ex.message, 5);
                }

            };


            $scope.LoginURL = function () {
                

                return utility_service.GetBaseURL() + "/LoginPage";


            };

            
            this.$onInit = function()
            {

             
                security_service.Subscribe_logout_event($scope, this.LogoutEvent);


                //security_service.Subscribe_login_event($scope, this.LoginEvent);




                try {

                    LogStatusDisplay()

                }
                catch (e) {

                    throw {
                        source: "LogStatusDisplay",
                        message: "Error: " + e
                    }

                }
            }
            
    }


})();

(function () {

    'use strict'

    AngularApplication.component("menuComponent",
        {

            templateUrl: function (rootUrl) { return rootUrl + "/angular_app/components/views/menu_component.html" },
            bindings: {},
            controller: ["$scope", "$log", "security_service", "navigation_service", "utility_service", menu_component_ctrl],
            controllerAs: "ctr"
        }
    );


    function menu_component_ctrl($scope, $log, security_service, navigation_service, utility_service) {


        this.LoginEvent = function () {

            var Result = null;


            // Login Occured Rebuild Menu On 
            // On Page Render after Login Redirect
            // Render Menu with no Refresh

            Result = navigation_service.BuildMenu(true);

            if ( Result.status != "success")
            {
                utility_service.ExceptionPopUpDialog("LoginEvent", "An error occured: " + Result.description, 5);
            }

        }

        this.LogoutEvent = function () {


            RenderMenu(true);


        }

        function RenderMenu(boolRefresh)
        {

            var Result = null;

            var KendoMenuJSON = null;

            Result = navigation_service.BuildMenu(boolRefresh);

            if (Result.status == "success") {

                KendoMenuJSON = Result.data;

                $("#header_menu").kendoMenu({
                    dataSource: KendoMenuJSON,
                    select: function (e) {

                        var URL = $(e.item).find('a:first').attr('href');
                        var anchor_tag = $(e.item).find('a:first');

                        if (URL.indexOf("target=_blank") != -1) {

                            anchor_tag[0].target = "_blank";
                        }
                        else {

                            anchor_tag[0].target = "_parent";

                        }

                    }

                });
            }
            else
            {
                
                utility_service.ExceptionPopUpDialog("RenderMenu", "An error occured: " + Result.description, 5);
            
            }


        }
          
        this.$onInit = function()
        {

          

            security_service.Subscribe_logout_event($scope, this.LogoutEvent);


            security_service.Subscribe_login_event($scope, this.LoginEvent);


            // Always Render From Current/Last Menu JSON Generated.

            RenderMenu(false);




        }
            
    }


})();

(function () {

    'use strict'

    AngularApplication.component("menuSidebarComponent",
        {

            templateUrl: function (rootUrl) { return rootUrl + "/angular_app/components/views/menu_sidebar_component.html" },
            bindings: {},
            controller: ["$scope", "$log", "security_service", "navigation_service", menu_sidebar_component_ctrl],
            controllerAs: "ctr"
        }
    );


    function menu_sidebar_component_ctrl($scope, $log, security_service, navigation_service) {



        function RenderSideBarMenu()
        {
            var KendoMenuJSON = null;
            var Result = null;


            try {


                Result = navigation_service.BuildSideBarMenu();


                if (Result.status == "success") {


                    KendoMenuJSON = Result.data;


                    $("#sidebar_treeview").kendoTreeView({
                        dataSource: KendoMenuJSON,
                        dataBound: function (e) {



                            /*
                            
                            var URL = $(e.node).find('a:first').attr('href');
                            var anchor_tag = $(e.node).find('a:first');
    
                            if (URL.indexOf("#") != -1) {
    
                                anchor_tag[0].target = "_parent";
                            }
                            else {
    
                                anchor_tag[0].target = "_blank";
    
                            }
                        */


                        },


                        select: function (e) {



                            // For Now Everything is Opened In New Window
                            // Revist when local content is added

                            var anchor_tag = $(e.node).find('a:first');

                            anchor_tag[0].target = "_blank";



                            /*
                            var URL = $(e.node).find('a:first').attr('href');
                            var anchor_tag = $(e.node).find('a:first');
    
                            if (URL.indexOf("") != -1) {
    
                                anchor_tag[0].target = "_parent";
                            }
                            else {
    
                                anchor_tag[0].target = "_blank";
    
                            }
                            */


                        }

                    });
                }
                else
                {
                    utility_service.ExceptionPopUpDialog("RenderSideBarMenu", "An error occured: " + Result.description, 5);

                }

            }
            catch (e) {

                throw {
                    source: "RenderSideBarMenu",
                    message: "Error: " + e
                }

            }

        }
          
        this.$onInit = function()
        {

         
            RenderSideBarMenu(false);

        }
            
    }


})();

(function () {

    'use strict'

    AngularApplication.controller("azuredevice_page_controller", ["$scope", "$log", '$interval', "utility_service",   "azuredevice_service", "$exceptionHandler", azuredevice_page_controller])


    function azuredevice_page_controller($scope, $log, $interval, utility_service, azuredevice_service, $exceptionHandler) {


        $scope.bolTelemetryRefresh = false;
        $scope.bolTelemetryRefreshPromise = null;
        $scope.bolEnableTelemetry = false;
        $scope.bolDeviceOnline = false;
        $scope.TelemetryInterval = "0";
        $scope.TelemetryIntervalItemCount = 50;
        $scope.Device_Status = null;
        $scope.Device_Status_Description = "Device Status is not online.";
        $scope.Selected_Device_Refresh_Interval = "None";
        $scope.Selected_Device = "None Selected";
        $scope.Device_Selected = false;
        $scope.RegisteredDevices = null;
        $scope.IoTHubConnected = false;


        $scope.Initialize = function () {


            try
            {

                // Initialize Kendo Button Styles Replaced With Bootstrap Buttons
                /*
                $("#button_device_enable").kendoButton();
                $("#button_device_disable").kendoButton();
                $("#button_device_telemetry_interval").kendoButton();
                $("#button_device_refresh").kendoButton();
                */

                debugger;

                // Connect to IoT Hub and Get Registered Devices

                if ($scope.LoadHubDevices())
                {

                    $scope.LoadHubDevicesDropdown();


                }


              

                $('#select_device_refresh_options li a').on('click', function () {


                    $scope.Selected_Device_Refresh_Interval = $(this).html();

                    $scope.TelemetryItemGridRefresh($scope.Selected_Device_Refresh_Interval);

                });


                /*
                $('#select_device li a').on('click', function () {


                    alert("Select Event" + $(this).html());

                    $scope.Selected_Device = $(this).html();

                    if ($scope.Selected_Device != 'None Selected') {

                        $scope.Device_Selected = true;

                        $scope.GetDeviceStatus();

                        $scope.LoadTelemetryItemGrid();


                    }
                    else {

                        $scope.Device_Selected = false;

                    }

                });
                */

                

            }
            catch (ex) {

                $exceptionHandler(ex.message, "Initialize")

                utility_service.ExceptionPopUpDialog("Initialize : ", "An error occured: " + ex.message, 5);
            }
        

        }


        $scope.OnDeviceSelect = function ($event) {

         


              

                $scope.Selected_Device = $event.target.innerHTML;

                if ($scope.Selected_Device != 'None Selected') {

                    $scope.Device_Selected = true;

                    $scope.GetDeviceStatus();

                    $scope.LoadTelemetryItemGrid();


                    $scope.$apply();


                }
                else {

                    $scope.Device_Selected = false;

                }

        }



        $scope.LoadHubDevices = function () {

            var Result = null; 
           
            try
            {
                Result = azuredevice_service.GetHubDevices();

                if (Result.status = "success") {

                    $scope.RegisteredDevices = Result.data;

                    $scope.IoTHubConnected = true;

                }
                else
                {
                    $scope.IoTHubConnected = false;
                }

                //deviceId


            }
            catch (ex) {

                $exceptionHandler(ex.message, "LoadHubDevices")

                utility_service.ExceptionPopUpDialog("LoadHubDevices : ", "An error occured: " + ex.message, 5);
            }

            return $scope.IoTHubConnected;


        }


        $scope.LoadHubDevicesDropdown = function () {

            

            try {
            

                

                


            }
            catch (ex) {

                $exceptionHandler(ex.message, "LoadHubDevicesDropdown")

                utility_service.ExceptionPopUpDialog("LoadHubDevicesDropdown : ", "An error occured: " + ex.message, 5);
            }

        }



        $scope.EnableTelememtry = function () {

            $scope.bolEnableTelemetry = true;

            azuredevice_service.EnableDisableTelemtry($scope.Selected_Device, $scope.bolEnableTelemetry)

            $scope.GetDeviceStatus();

        }


        $scope.DisableTelememtry = function () {

            $scope.bolEnableTelemetry = false;

            azuredevice_service.EnableDisableTelemtry($scope.Selected_Device, $scope.bolEnableTelemetry);


            $scope.GetDeviceStatus();


        }

        $scope.UpdateTelemetryPeriod = function () {

            azuredevice_service.UpdateTelemetryInterval($scope.Selected_Device, $scope.TelemetryInterval)

            $scope.GetDeviceStatus();

        }

        $scope.GetDeviceStatus = function () {


            var Result = null;

       
            try
            {

                Result = azuredevice_service.GetDeviceStatus($scope.Selected_Device)

            if (Result.status = "success") {


                $scope.Device_Status = Result.data;

                /*
                {
                    "device_ID": "raspberry_voltage_monitor",
                        "deviceOnline": true,
                            "telemetryEnabled": false,
                                "telemetryInterval": 2000,
                                    "deviceStatusDesc": "Device raspberry_voltage_monitor is online and telemetry is currently disabled."
                }
                */


                
                
                
                $scope.TelemetryInterval = $scope.Device_Status.telemetryInterval;

                $scope.bolEnableTelemetry = $scope.Device_Status.telemetryEnabled;

                $scope.bolDeviceOnline = $scope.Device_Status.deviceOnline;

                if ($scope.bolDeviceOnline)
                {
                    $scope.Device_Status_Description = $scope.Device_Status.deviceStatusDesc;
                }
                else
                {
                    $scope.Device_Status_Description = "Device is not online."
                }
            }
            else {

                $scope.Device_Status_Description = "Device is not online.";

            }

        }
              catch (ex) {

                $exceptionHandler(ex.message, "LoadTelemetryItemGrid")
                utility_service.ExceptionPopUpDialog("LoadTelemetryItemGrid : ", "An error occured: " + ex.message, 5);

            }


        }
        
        $scope.LoadTelemetryItemGrid = function () {


            // Do Not Include Only Currently Published = Everything Except InActive

          
            var Result = null;
            var TelemetryItemsJSON = null;



            try {

                Result = azuredevice_service.GetDeviceTelemetryItems($scope.Selected_Device, $scope.TelemetryIntervalItemCount)


                if (Result.status = "success") {

                    
                    TelemetryItemsJSON = [];




                    $("#device_telemetry_grid").kendoGrid({

                        dataSource: {
                            data: TelemetryItemsJSON,
                            pageSize: 10
                        },
                        navigatable: true,
                        pageable: true,
                        sortable: true,
                        height: 430,
                        columns: [
                            { field: "Id", title: "ID", width: 40 },
                            { field: "Sample_Time", title: "Sample Time", width: 100 },
                            { field: "Voltage", title: "Voltage", width: 40 },
                            { field: "Device_ID", title: "Device ID", width: 100 },
                            { field: "Device_Channel", title: "Device Channel", width: 40 }
                        ],
                        editable: false
                    });
                    

                    TelemetryItemsJSON = Result.data;


                    $("#device_telemetry_grid").kendoGrid({
                        
                        dataSource: {
                            data: TelemetryItemsJSON,
                            pageSize: 10               
                        },
                        navigatable: true,
                        pageable: true,
                        sortable: true,
                        height: 430,
                        columns: [
                            { field: "Id", title: "ID", width: 40 },
                            { field: "Sample_Time", title: "Sample Time", width: 100 },
                            { field: "Voltage", title: "Voltage", width: 40 },
                            { field: "Device_ID", title: "Device ID", width: 100 },
                            { field: "Device_Channel", title: "Device Channel", width: 40 }
                            ],
                        editable: false
                    });

                }
                else
                {
                    // fail
                    utility_service.ExceptionPopUpDialog("LoadTelemetryItemGrid", "An error occured: " + Result.description, 5);

                }

            }
            catch (ex) {

                $exceptionHandler(ex.message, "LoadTelemetryItemGrid")
                utility_service.ExceptionPopUpDialog("LoadTelemetryItemGrid : ", "An error occured: " + ex.message, 5);

            }

        }


        $scope.TelemetryItemGridRefresh = function (RefreshInterval) 
        {

            var RefreshIntervalMilliSeconds = 0;


            switch (RefreshInterval)
            {
                case "None":

                    RefreshIntervalMilliSeconds = 0;

                    break;
                case "5 Sec":

                    RefreshIntervalMilliSeconds = 5000;
                    break;
                case "10 Sec":

                    RefreshIntervalMilliSeconds = 10000;
                    break;
                case "30 Sec":
                    RefreshIntervalMilliSeconds = 30000;
                    break;
                case "60 Sec":
                    RefreshIntervalMilliSeconds = 60000;
                    break;
                case "120 Sec":
                    RefreshIntervalMilliSeconds = 1200000;
                    break;
                default:
                    break;
            }

            if (RefreshIntervalMilliSeconds == 0)
            {
                if ($scope.bolTelemetryRefreshPromise != null)
                {
                    
                    $interval.cancel($scope.bolTelemetryRefreshPromise);


                }

                $scope.bolTelemetryRefreshPromise = null;

            }
            else
            {

                $scope.bolTelemetryRefreshPromise = $interval($scope.LoadTelemetryItemGrid, RefreshIntervalMilliSeconds, 0, true);

            }
           
        }


        $scope.Initialize();



    }

})();

(function () {

    'use strict'

    AngularApplication.controller("contact_page_controller", ["$scope", "$log", "utility_service", "$sce", "$compile", "$exceptionHandler","contact_service", contact_page_controller])


    function contact_page_controller($scope, $log, utility_service, $sce, $compile, $exceptionHandler, contact_service) {

        $scope.ContactData = { first_name: null, last_name: null, email: null, subject: null, msg: null };

        $scope.ContactRequestSubmitMessage = "";

        $scope.Initialize = function () {

            
        }


        $scope.ContactDialogOne_Open = function () {

            try {

                //ng-bind-html="DialogContent" On interface
                $//scope.DialogContent = $sce.trustAsHtml($("#contact_dlg_one").html());
    
                $scope.ContactData = { first_name: null, last_name: null, email: null, msg: null };


                $("#ContactWorkflowDialog").html($("#contact_dlg_one").html());


                $("#ContactWorkflowDialog").modal('show');

                var dialog = $("#ContactWorkflowDialog");

                $compile(dialog.contents())($scope)
                
            
            }
            catch (ex) {

                $exceptionHandler(ex.message, "ContactDialogOne_Open")

                utility_service.ExceptionPopUpDialog("ContactDialogOne_Open: ", "An error occured: " + ex.message, 5);


            }
            
        }


        $scope.ContactDialogOne_Next = function () {

            try {

               
                 // Dont Hide and this Works Out Fine!!
                //$("#ContactWorkflowDialog").modal('hide');

                $("#ContactWorkflowDialog").html($("#contact_dlg_two").html());

                $("#ContactWorkflowDialog").modal('show');

                
                var dialog = $("#ContactWorkflowDialog");
                $compile(dialog.contents())($scope)
                


               
            }
            catch (ex) {

                $exceptionHandler(ex.message, "ContactDialogOne_Next")
                utility_service.ExceptionPopUpDialog("ContactDialogOne_Next : ", "An error occured: " + ex.message, 5);

            }
           

        }


        $scope.ContactDialogTwo_Previous = function () {

            try {


                // Dont Hide and this Works Out Fine!!
                //$("#ContactWorkflowDialog").modal('hide');

                $("#ContactWorkflowDialog").html($("#contact_dlg_one").html());

                $("#ContactWorkflowDialog").modal('show');


                var dialog = $("#ContactWorkflowDialog");
                $compile(dialog.contents())($scope)



                



            }
            catch (ex) {

                $exceptionHandler(ex.message, "ContactDialogTwo_Previous")
                utility_service.ExceptionPopUpDialog("ContactDialogTwo_Previous : ", "An error occured: " + ex.message, 5);

            }


        }

        $scope.ContactDialogTwo_Submit = function () {

            try {


                var Result = null;


                Result = contact_service.AddContactRequest($scope.ContactData);

                if (Result.status  == "success" )
                {
                
                    // Dont Hide and this Works Out Fine!!
                    //$("#ContactWorkflowDialog").modal('hide');

                    $scope.ContactRequestSubmitMessage = "Your Contact Request is on its way.  Thank You"

                    $("#ContactWorkflowDialog").html($("#contact_dlg_three").html());

                    $("#ContactWorkflowDialog").modal('show');


                    var dialog = $("#ContactWorkflowDialog");
                    $compile(dialog.contents())($scope)


                }
                else
                {
                    utility_service.ExceptionPopUpDialog("Contact Request Submission",  Result.description, 5);
               
                }
                

            }
            catch (ex) {

                $exceptionHandler(ex.message, "ContactDialogTwo_Submit")
                utility_service.ExceptionPopUpDialog("ContactDialogTwo_Submit  : ", "An error occured: " + ex.message, 5);

            }


        }


        $scope.ContactDialogThree_Load = function () {

            try {


             
                setTimeout(function () { $("#ContactWorkflowDialog").modal('hide'); }, 4000, null);



            }
            catch (ex) {

                $exceptionHandler(ex.message, "ContactDialogThree_Load")
                utility_service.ExceptionPopUpDialog("ContactDialogThree_Load : ", "An error occured: " + ex.message, 5);

            }

        }

        $scope.Initialize();

       
    }

})();

(function () {

    'use strict'

    AngularApplication.controller("contenteditor_page_controller", ["$scope", "$log", "utility_service", "security_service", "content_service", contenteditor_page_controller])

    function contenteditor_page_controller($scope, $log, utility_service, security_service, content_service) {

      
        $scope.content_type_description = null;
        $scope.ContentEdit_Mode = null;
        $scope.ContentArea_ID = null;
        $scope.Content_ID = null;

        $scope.Content_Description = null;
        $scope.Content_PublishDate = null;
        $scope.Content_ExpirationDate = null;
        $scope.Content_Area = null;
        $scope.Content_ActiveStatus = true;

        $scope.Initialize = function () {


            var LoggedInStatus = false;
            var Result = null;


            try {
                Result = security_service.GetLoggedInStatusRole("Administration Access");


                if (Result.status == "success")
                {

                    LoggedInStatus = Result.data;

                    if (LoggedInStatus == false) {

                        utility_service.NotificationPopupDialog("Invalid Access", "Invalid Access Please Login", 3);

                        utility_service.DelayRun(utility_service.NavigateHome, 3);

                    }
                    else {

                        $scope.BuildContentEditor();

                        // caid=2&m=u&cid=

                        $scope.ContentEdit_Mode = utility_service.GetParam("m");
                        $scope.ContentArea_ID = utility_service.GetParam("caid");
                        $scope.Content_ID = utility_service.GetParam("cid");


                        //$("#input_content_expirationdate").kendoDatePicker();
                        //$("#input_content_publishdate").kendoDatePicker();

                        $("#input_content_expirationdate").kendoDatePicker();



                        $("#input_content_publishdate").kendoDatePicker();



                        if ($scope.ContentEdit_Mode == "a") {

                            if ($scope.ContentArea_ID == "1") {
                                $scope.content_type_description = "Add Home Page Content";
                            }
                            else {
                                $scope.content_type_description = "Add News Page Content";
                            }

                            // Initialize Kendo Button Styles
                            $("#button_content_add_submit").kendoButton();

                            $("#button_content_update_submit").hide();

                            $("#button_content_delete_submit").hide();


                        }
                        else {

                            if ($scope.ContentArea_ID == "1") {
                                $scope.content_type_description = "Update Home Page Content";
                            }
                            else {
                                $scope.content_type_description = "Update News Page Content";
                            }


                            // Populate Editor Form
                            $scope.SelectContent();


                            // Initialize Kendo Button Styles
                            $("#button_content_update_submit").kendoButton();

                            $("#button_content_delete_submit").kendoButton();


                            $("#button_content_add_submit").hide();



                        }
                    }
                }
                else
                {
                    utility_service.ExceptionPopUpDialog("Initialize", "An error occured: " + Result.description, 5);

                }
            }
             catch (ex) {

                 $exceptionHandler(ex.message, "Initialize")
                 utility_service.ExceptionPopUpDialog("Initialize : ", "An error occured: " + ex.message, 5);
            }

        }

        $scope.SelectContent = function () {

            var DataContentItem = null;
            var Result = null;

        
            try {
               

                Result   = content_service.GetContentItem($scope.Content_ID)

                if (Result.status == "success") {


                    DataContentItem = Result.data;


                    // Populate Angular Model

                    $scope.Content_Description = DataContentItem.Description;


                    var NewDate = null;

                    NewDate = kendo.toString(DataContentItem.Publish_Date, 'MM/dd/yyyy');
                    $("#input_content_publishdate").data('kendoDatePicker').value(NewDate);

                    $scope.Content_PublishDate = DataContentItem.Publish_Date;


                    NewDate = kendo.toString(DataContentItem.Expiration_Date, 'MM/dd/yyyy');
                    $("#input_content_expirationdate").data('kendoDatePicker').value(NewDate);

                    $scope.Content_ExpirationDate = DataContentItem.Expiration_Date;

                    var editor = $("#content_editor").data("kendoEditor");

                    editor.value(DataContentItem.ContentValue);


                    $scope.Content_Area = DataContentItem.ContentValue;

                }
                else
                {
                    utility_service.ExceptionPopUpDialog("SelectContent: ", "An error occured: " + Result.description, 5);

                }
            }
            catch (ex) {

                $exceptionHandler(ex.message, "SelectContent")
                utility_service.ExceptionPopUpDialog("SelectContent : ", "An error occured: " + ex.message, 5);

            }

        }


        $scope.UpdateContent = function () {

            try {


              


                var ContentItem = null;


                var HTMLContent = null;
                var Publish_Date = null;
                var Expiration_Date = null;
                var Result = null;



                var ContentServiceEndpoint = utility_service.GetBaseURL() + "/ContentService/Content/Update";

                // Build JSON Object For Request


                var editor = $("#content_editor").data("kendoEditor");


                HTMLContent = editor.value();

                // Update Scope
                $scope.Content_Area = HTMLContent;

                Expiration_Date = kendo.toString($("#input_content_expirationdate").data('kendoDatePicker').value(), 'MM/dd/yyyy');

                Publish_Date = kendo.toString($("#input_content_publishdate").data('kendoDatePicker').value(), 'MM/dd/yyyy');

                ContentItem =
                       {
                           "Content_ID": $scope.Content_ID,
                           "ContentArea_ID": $scope.ContentArea_ID,
                           "ContentValue": HTMLContent,
                           "Create_Date": "",
                           "Publish_Date": Publish_Date,
                           "Expiration_Date": Expiration_Date,
                           "Description": $scope.Content_Description,
                           "Active": $scope.Content_ActiveStatus
                       };


                Result = content_service.UpdateContentItem(ContentItem);

                if (Result.status == "success" ) {

                    utility_service.NotificationPopupDialog("Content Update", "Content Update Success.", 3);

                    utility_service.DelayRun($scope.RedirectAfterEdit, 3);
                }
                else
                {
                    utility_service.ExceptionPopUpDialog("UpdateContent", "An error occured: " + Result.description, 5);

                }

            }
            catch (ex) {

                $exceptionHandler(ex.message, "UpdateContent")
                utility_service.ExceptionPopUpDialog("UpdateContent : ", "An error occured: " + ex.message, 5);

            }

        }

        $scope.RedirectAfterEdit = function () {

            if ($scope.ContentArea_ID == "1") {
                utility_service.PageRedirect(utility_service.GetBaseURL() + "/HomeContent");
            }
            else {
                utility_service.PageRedirect(utility_service.GetBaseURL() + + "/NewsContent");
            }
        }


        $scope.AddContent = function () {

            try {

                var ContentItem = null;
                var JSONRequestStringData = null;

                var HTMLContent = null;
                var Publish_Date = null;
                var Expiration_Date = null;
                var Creation_Date = null;
                var Result = null;



                var ContentServiceEndpoint = utility_service.GetBaseURL() + "/ContentService/Content/Add";

                // Build JSON Object For Request

                var editor = $("#content_editor").data("kendoEditor");


                HTMLContent = editor.value();

                // Update Scope
                $scope.Content_Area = HTMLContent;

                Expiration_Date = kendo.toString($("#input_content_expirationdate").data('kendoDatePicker').value(), 'MM/dd/yyyy');

                Publish_Date = kendo.toString($("#input_content_publishdate").data('kendoDatePicker').value(), 'MM/dd/yyyy');

                Creation_Date = kendo.toString(new Date(), 'MM/dd/yyyy');


                ContentItem =
                       {
                           "Content_ID": $scope.Content_ID,
                           "ContentArea_ID": $scope.ContentArea_ID,
                           "ContentValue": HTMLContent,
                           "Create_Date": Creation_Date,
                           "Publish_Date": Publish_Date,
                           "Expiration_Date": Expiration_Date,
                           "Description": $scope.Content_Description,
                           "Active": $scope.Content_ActiveStatus
                       };


                Result = content_service.AddContentItem(ContentItem);

                if (Result.status == "success")
                {
                    utility_service.NotificationPopupDialog("Content Add", "Content Add Success.", 3);

                    utility_service.DelayRun($scope.RedirectAfterEdit, 3);
                }
                else
                {
                    utility_service.ExceptionPopUpDialog("AddContent", "An error occured: " + Result.description, 5);
                }

            }
            catch (ex) {

                $exceptionHandler(ex.message, "AddContent")
                utility_service.ExceptionPopUpDialog("AddContent : ", "An error occured: " + ex.message, 5);

            }

        }


        $scope.DeleteContent = function () {

            try {

                var ContentItem = null;
                var HTMLContent = null;
                var Publish_Date = null;
                var Expiration_Date = null;
                var Result = false;

     


              

                // Build JSON Object For Request


                var editor = $("#content_editor").data("kendoEditor");


                HTMLContent = editor.value();

                // Update Scope
                $scope.Content_Area = HTMLContent;

                Expiration_Date = kendo.toString($("#input_content_expirationdate").data('kendoDatePicker').value(), 'MM/dd/yyyy');

                Publish_Date = kendo.toString($("#input_content_publishdate").data('kendoDatePicker').value(), 'MM/dd/yyyy');

                $scope.Content_ActiveStatus = false;


                ContentItem =
                       {
                           "Content_ID": $scope.Content_ID,
                           "ContentArea_ID": $scope.ContentArea_ID,
                           "ContentValue": HTMLContent,
                           "Create_Date": "",
                           "Publish_Date": Publish_Date,
                           "Expiration_Date": Expiration_Date,
                           "Description": $scope.Content_Description,
                           "Active": $scope.Content_ActiveStatus
                       };

                Result = content_service.DeleteContentItem(ContentItem);

                if (Result.status == "success") {

                    utility_service.NotificationPopupDialog("Content Delete", "Content Delete Success.", 3);

                    utility_service.DelayRun($scope.RedirectAfterEdit, 3);

                }
                else {
                    utility_service.ExceptionPopUpDialog("DeleteContent", "An error occured: " + Result.description, 5);

                }
               

            }
            catch (e) {

                $exceptionHandler(ex.message, "DeleteContent")
                utility_service.ExceptionPopUpDialog("DeleteContent : ", "An error occured: " + ex.message, 5);

            }

        }






        $scope.BuildContentEditor = function () {

            try {


                /*
                $("#content_editor").kendoEditor({
                    resizable: {
                        content: true,
                        toolbar: true
                    }
                });
                */

                
                $("#content_editor").kendoEditor({
                    serialization: {
                        scripts: true
                    },
                    tools: [
                        "bold",
                        "italic",
                        "underline",
                        "strikethrough",
                        "justifyLeft",
                        "justifyCenter",
                        "justifyRight",
                        "justifyFull",
                        "insertUnorderedList",
                        "insertOrderedList",
                        "indent",
                        "outdent",
                        "createLink",
                        "unlink",
                        "insertImage",
                        "subscript",
                        "superscript",
                        "createTable",
                        "addRowAbove",
                        "addRowBelow",
                        "addColumnLeft",
                        "addColumnRight",
                        "deleteRow",
                        "deleteColumn",
                        "viewHtml",
                        "formatting",
                        "fontName",
                        "fontSize",
                        "foreColor",
                        "backColor"
                    ]
                });
                


            }
            catch (e) {

                $exceptionHandler(ex.message, "BuildContentEditor")
                utility_service.ExceptionPopUpDialog("BuildContentEditor : ", "An error occured: " + ex.message, 5);

            }

        }

        $scope.Initialize();

    }

})();

(function () {

    'use strict'

    AngularApplication.controller("homeautomation_page_controller", ["$scope", "$log", "utility_service", "security_service", "content_service", "$exceptionHandler", homeautomation_page_controller])


    function homeautomation_page_controller($scope, $log, utility_service, security_service, content_service, $exceptionHandler) {


        $scope.Initialize = function () {


            try
            {

                var LoggedInStatus = false;
                var Result = null;

                Result = security_service.GetLoggedInStatusRole("Administration Access")

                if (Result.status == "success") {


                     LoggedInStatus = Result.data;

                   


                     if (LoggedInStatus == false) {


                         utility_service.NotificationPopupDialog("Invalid Access", "Invalid Access Please Login", 3);

                         utility_service.DelayRun(utility_service.NavigateHome, 3);


                     }
                     else {

                        

                     }
                 }
                 else
                 {

                     utility_service.ExceptionPopUpDialog("Initialize", "An error occured: " + Result.description, 5);


                 }
            }
            catch (ex) {

                $exceptionHandler(ex.message, "Initialize")
                utility_service.ExceptionPopUpDialog("Initialize : ", "An error occured: " + ex.message, 5);
            }
        

        }

      
     
        $scope.Initialize();



    }

})();

(function () {

    'use strict'

    AngularApplication.controller("homecontent_page_controller", ["$scope", "$log", "utility_service", "security_service", "content_service", "$exceptionHandler", homecontent_page_controller])


    function homecontent_page_controller($scope, $log, utility_service, security_service, content_service, $exceptionHandler) {


        $scope.Initialize = function () {


            try
            {

                var LoggedInStatus = false;
                var Result = null;

                 Result = security_service.GetLoggedInStatusRole("Administration Access")


                 if (Result.status == "success") {


                     LoggedInStatus = Result.data;


                     if (LoggedInStatus == false) {


                         utility_service.NotificationPopupDialog("Invalid Access", "Invalid Access Please Login", 3);

                         utility_service.DelayRun(utility_service.NavigateHome, 3);


                     }
                     else {

                         $scope.LoadContentItemGrid();

                     }
                 }
                 else
                 {

                     utility_service.ExceptionPopUpDialog("Initialize", "An error occured: " + Result.description, 5);


                 }
            }
            catch (ex) {

                $exceptionHandler(ex.message, "Initialize")
                utility_service.ExceptionPopUpDialog("Initialize : ", "An error occured: " + ex.message, 5);
            }
        

        }

        $scope.NavigateContentAdd = function () {

            utility_service.PageRedirect(utility_service.GetBaseURL() + "/ContentEditor?caid=1&m=a");

        }

      
        $scope.LoadContentItemGrid = function () {


            // Do Not Include Only Currently Published = Everything Except InActive

            var ContentServiceEndpoint = utility_service.GetBaseURL() + "/ContentService/Content/GetActive?caid=1&icp=false";
            var ContentItemsJSON = null;
            var Result = null;



            try {

                // Initialize Kendo Button Styles
                $("#button_add_contentarea").kendoButton();

                Result = content_service.GetContentItems(1);


                if (Result.status = "success") {


                    ContentItemsJSON = Result.data;

                    //$scope.DataSource = [{  "Content_ID" : "1", ContentArea_ID : "1", Description : "TEST" }];

                    $("#contentarea_grid").kendoGrid({
                        dataSource: ContentItemsJSON,
                        navigatable: true,
                        pageable: true,
                        sortable: true,
                        height: 430,
                        columns: [
                            { field: "Content_ID", title: "ID", width: 70 },
                            { field: "Description", title: "Description", width: 100 },
                            { field: "Create_Date", title: "Create Date", width: 120 },
                            { field: "Publish_Date", title: "Publish Date", width: 120 },
                            { field: "Expiration_Date", title: "Expiration Date", width: 150 },
                            { field: "Edit", title: "Edit", width: 50, template: '<a href="' + utility_service.GetBaseURL() + '/ContentEditor?caid=1&m=u&cid=#=Content_ID#" title="Click Here to Edit">Edit</a>' }],

                        editable: false
                    });

                }
                else
                {
                    // fail
                    utility_service.ExceptionPopUpDialog("LoadContentItemGrid", "An error occured: " + Result.description, 5);

                }

            }
            catch (ex) {

                $exceptionHandler(ex.message, "LoadContentItemGrid")
                utility_service.ExceptionPopUpDialog("LoadContentItemGrid : ", "An error occured: " + ex.message, 5);

            }

        }


        $scope.Initialize();



    }

})();

(function () {

    'use strict'

    AngularApplication.controller("login_page_controller", ["$scope", "$log", "utility_service",  "security_service", login_page_controller])


    function login_page_controller($scope, $log, utility_service, security_service) {


        $scope.Initialize = function () {

            // Initialize Kendo Button Styles
            //$("#button_login_submit").kendoButton();

        }


        $scope.LoginUser = function () {


            var LoginResponse = false;
            var requestUrl = "";
            var PostProxyURL = "";
            var reCaptchaResponseArray = false;
            var Result = null;


            
            try {

                /*
                // Call Recaptcha

                
                LoginResponse = true;   // Recaptcha


                $scope.recaptcha_challenge_field = Recaptcha.get_challenge();

                $scope.recaptcha_response_field = Recaptcha.get_response();

                $scope.remoteIp = $("#remote_ip").val();

                $scope.privateKey = "6Lcarf8SAAAAAEXGEqSWRo1zN1pURA6A3d1Ayevm";

                requestUrl = "http://www.google.com/recaptcha/api/verify?privatekey=" + $scope.privateKey + "&remoteip=" + $scope.remoteIp + "&challenge=" + $scope.recaptcha_challenge_field + "&response=" + $scope.recaptcha_response_field;

                PostProxyURL = utility_service.GetBaseURL() + "/PostProxy.aspx?url=" + encodeURIComponent(requestUrl);

                $.ajax({
                    type: "POST",
                    url: PostProxyURL,
                    dataType: "json",
                    crossDomain: true,
                    success: function (data) {


                    },
                    error: function (xhr, textStatus, errorThrown) {

                       
                        if (xhr.status == 200) {

                            reCaptchaResponseArray = xhr.responseText.split("\n");

                            if (reCaptchaResponseArray[0] == "true") {


                                // Recaptcha Worked Now Try Login Credentials 

                                 Result = security_service.LoginUser($scope.UserName, $scope.Password);


                                if (Result.status == "success") {

                                    LoginResponse = Result.data;

                                    if (LoginResponse) {


                                       


                                        utility_service.NotificationPopupDialogWithHandler("Login", "Login Successful", 5, utility_service.NavigateHome());


                                        $scope.UserName = null;
                                        $scope.Password = null;

                                       

                                    }
                                    else {

                                        utility_service.NotificationPopupDialog("Login", "Login Unsuccessful", 3);

                                        Recaptcha.reload();

                                    }
                                }
                                 else
                                {
                                    utility_service.ExceptionPopUpDialog("LoginUser", "An error occured: " + Result.Description, 5);

                                }
   
                            }
                            else {

                                utility_service.NotificationPopupDialog("Login", "Login Unsuccessful", 3);

                                Recaptcha.reload();


                            }
                        }
                        else {

                            utility_service.ExceptionPopUpDialog("LoginUser", "An error occured: " + xhr.status + " " + xhr.statusText, 5);

                           
                        }
                    }
                });
                */


                // Recaptcha Worked Now Try Login Credentials 

                Result = security_service.LoginUser($scope.UserName, $scope.Password);


                if (Result.status == "success") {

                    LoginResponse = Result.data;

                    if (LoginResponse) {


                        utility_service.NotificationPopupDialogWithHandler("Login", "Login Successful", 5, utility_service.NavigateHome());


                        $scope.UserName = null;
                        $scope.Password = null;



                    }
                    else {

                        utility_service.NotificationPopupDialog("Login", "Login Unsuccessful", 3);

                        Recaptcha.reload();

                    }
                }
                else {
                    utility_service.ExceptionPopUpDialog("LoginUser", "An error occured: " + Result.Description, 5);

                }




            }
            catch (e) {

                $exceptionHandler(ex.message, "LoginUser")
                utility_service.ExceptionPopUpDialog("LoginUser : ", "An error occured: " + ex.message, 5);
            }
           







            return true;

        }


        $scope.Initialize();

       
    }

})();

(function () {

    'use strict'

    AngularApplication.controller("mediaphoto_page_controller", ["$scope", "$log", "utility_service", "security_service", mediaphoto_page_controller])


    function mediaphoto_page_controller($scope, $log, utility_service, security_service) {


        $scope.Initialize = function () {

            try
            {

                hs.graphicsDir = utility_service.GetBaseURL() + '/scripts/lib/highslide/graphics/';

                hs.align = 'center';
                hs.transitions = ['expand', 'crossfade'];
                hs.outlineType = 'glossy-dark';
                hs.wrapperClassName = 'dark';
                hs.fadeInOut = true;
                //hs.dimmingOpacity = 0.75;

                // Add the controlbar
                if (hs.addSlideshow) hs.addSlideshow({
                    //slideshowGroup: 'group1',
                    interval: 5000,
                    repeat: false,
                    useControls: true,
                    fixedControls: 'fit',
                    overlayOptions: {
                        opacity: .6,
                        position: 'bottom center',
                        hideOnMouseOut: true
                    }
                });
            }
            catch(ex)
            {
                $exceptionHandler(ex.message, "Initialize")
                utility_service.ExceptionPopUpDialog("Initialize : ", "An error occured: " + ex.message, 5);
            }

        }


        $scope.Initialize();



    }

})();

(function () {

    'use strict'

    AngularApplication.controller("site_controller", ["$scope", "$log", site_controller])


    function site_controller($scope, $log) {

        

        $scope.MyAppName = "monacos.us.mvc";
        $scope.Footer_Date_Value = "";
        $scope.Footer_Time_Value = "";


        //$scope.timer_service_obj = timer_service;
        $scope.timer_one = null;
        $scope.timer_two = null;

        // timer service testfunction
        this.Timer_One_Handler = function ()
        {
            $log.debug("One");

        }

        // timer service test function
        this.Timer_Two_Handler = function () {

            $log.debug("Two");


        }

        this.Initialize = function ()
        {

            // timer service test code
            /*
            $scope.timer_one = timer_service(this.Timer_One_Handler, 1000);

            $scope.timer_one.restart();


            $scope.timer_two = timer_service(this.Timer_Two_Handler, 60000)
            
            $scope.timer_two.restart();
            */



        }

        this.Initialize();



    }



  


    site_controller.$inject = ["$scope", "date_time_display_module"];


})();

(function () {

    'use strict'

    AngularApplication.service("azuredevice_service", ["$log", "$http", "utility_service", azuredevice_service]);

    function azuredevice_service($log, $http, utility_service) {



        function GetDeviceTelemetryItems(Device_ID, TelemetryItemResultCount) {

            var ServiceEndpoint = "http://voltagemonitorservice-developmentenv.azurewebsites.net/api/DeviceData/api/DeviceData/GetDeviceTelemetry";
            var JSONTelemetryRequest = null;
            var TelemetryRequest = null;

            var Result = null;

            try {


                var PostProxyURL = utility_service.GetBaseURL() + "/PostProxy.aspx?url=" + encodeURIComponent(ServiceEndpoint);


                TelemetryRequest = {
                    'device_ID': Device_ID,
                    'topNTelemetry': TelemetryItemResultCount,
                    'start_Time': null,
                    'end_Time': null
                }



                JSONTelemetryRequest = JSON.stringify(TelemetryRequest)

                $.ajax({
                    type: "POST",
                    url: PostProxyURL,
                    data: JSONTelemetryRequest,
                    contentType: "application/json; charset=utf-8",  // content type sent to server
                    dataType: "json",         //Expected data format from server
                    processData: true,
                    async: false,
                    error: function (xhr) {

                        if (xhr.status == "200") {

                            Result = { status: "success", description: "success", data: null };

                        }
                        else {

                            Result = { status: "fail", description: "An error occured: " + xhr.status + " " + xhr.statusText, data: null };

                        }
                    },
                    success: function (result) {


                        Result = { status: "success", description: "success", data: result };


                    }

                });

            }
            catch (e) {

                throw {
                    source: "GetDeviceTelemeryItems",
                    message: "Error: " + e
                }

            }


            return Result;

        }

        function EnableDisableTelemtry(Device_ID, bolEnableTelemetry) {

            var ServiceEndpoint = "";
            var Result = null;

            try {

                if (bolEnableTelemetry == true) {

                    ServiceEndpoint = "http://voltagemonitorservice-developmentenv.azurewebsites.net/api/DeviceControl/EnableTelemetry/" + Device_ID + "/true";

                }
                else {

                    ServiceEndpoint = "http://voltagemonitorservice-developmentenv.azurewebsites.net/api/DeviceControl/EnableTelemetry/" + Device_ID + "/false";

                }

                var PostProxyURL = utility_service.GetBaseURL() + "/PostProxy.aspx?url=" + encodeURIComponent(ServiceEndpoint);



                $.ajax({
                    type: "POST",
                    url: PostProxyURL,
                    dataType: "json",         //Expected data format from server
                    processData: true,
                    async: false,
                    error: function (xhr) {

                        if (xhr.status == "200") {

                            Result = { status: "success", description: "success", data: true };

                        }
                        else {

                            Result = { status: "fail", description: "An error occured: " + xhr.status + " " + xhr.statusText, data: false };

                        }
                    },
                    success: function (result) {


                        Result = { status: "success", description: "success", data: true };


                    }

                });

            }
            catch (e) {

                throw {
                    source: "EnableDisableTelemtry",
                    message: "Error: " + e
                }
            }

            return Result;


        }

        function UpdateTelemetryInterval(Device_ID, TelemetryInterval) {

         
            var ServiceEndpoint = 'http://voltagemonitorservice-developmentenv.azurewebsites.net/api/DeviceControl/SetTelemetryPeriod/' + Device_ID + '/' + TelemetryInterval.toString();  
            var Result = null;

            try {


                var PostProxyURL = utility_service.GetBaseURL() + "/PostProxy.aspx?url=" + encodeURIComponent(ServiceEndpoint);


            $.ajax({
                type: "POST",
                url: PostProxyURL,
                dataType: "json",         //Expected data format from server
                processData: true,
                async: false,
                error: function (xhr) {

                    if (xhr.status == "200") {

                        Result = { status: "success", description: "success", data: true };

                    }
                    else {

                        Result = { status: "fail", description: "An error occured: " + xhr.status + " " + xhr.statusText, data: false };

                    }
                },
                success: function (result) {

                    Result = { status: "success", description: "success", data: true };
                    
                }

            });

         }
         catch (e) {

                throw {
                    source: "UpdateTelemetryInterval",
                    message: "Error: " + e
                }
         }
       
        return Result;

        }

        
        function GetDeviceStatus(Device_ID) {

            var ServiceEndpoint = "http://voltagemonitorservice-developmentenv.azurewebsites.net/api/DeviceControl/GetDeviceStatus/" + Device_ID;

           
            var ContentItemsJSON = null;
            var Result = null;


            try {

                var PostProxyURL = utility_service.GetBaseURL() + "/PostProxy.aspx?url=" + encodeURIComponent(ServiceEndpoint);


                $.ajax({
                    type: "GET",
                    dataType: "json",         //Expected data format from server
                    url: PostProxyURL,
                    async: false,
                    error: function (xhr) {

                        Result = { status: "fail", description: "An error occured: " + xhr.status + " " + xhr.statusText, data: null };

                    },
                    success: function (result) {

                        Result = { status: "success", description: "success", data: result };

                    }


                });

            }
            catch (e) {

                throw {
                    source: "GetDeviceStatus",
                    message: "Error: " + e
                }

            }


            return Result;

        }

        function GetHubDevices() {


           
            var ServiceEndpoint = "http://voltagemonitorservice-developmentenv.azurewebsites.net/api/DeviceControl/GetHubDevices";



            var ContentItemsJSON = null;
            var Result = null;


            try {

                var PostProxyURL = utility_service.GetBaseURL() + "/PostProxy.aspx?url=" + encodeURIComponent(ServiceEndpoint);


                $.ajax({
                    type: "GET",
                    dataType: "json",         //Expected data format from server
                    url: PostProxyURL,
                    async: false,
                    error: function (xhr) {

                        Result = { status: "fail", description: "An error occured: " + xhr.status + " " + xhr.statusText, data: null };

                    },
                    success: function (result) {

                        Result = { status: "success", description: "success", data: result };

                    }


                });

            }
            catch (e) {

                throw {
                    source: "GetDeviceStatus",
                    message: "Error: " + e
                }

            }


            return Result;

        }

        return {
        
            GetDeviceTelemetryItems: GetDeviceTelemetryItems,
            EnableDisableTelemtry: EnableDisableTelemtry,
            UpdateTelemetryInterval: UpdateTelemetryInterval,
            GetDeviceStatus: GetDeviceStatus,
            GetHubDevices: GetHubDevices
        }
        
    }

})();
(function () {

    'use strict'

    AngularApplication.service("contact_service", ["$log", "$http", "utility_service", contact_service]);

    function contact_service( $log, $http,  utility_service) {

    
        function AddContactRequest(ContactRequest) {

            var ContentServiceEndpoint = utility_service.GetBaseURL() + "/Contact/ContactSubmit";
            var JSONContentItem = null;
            var Result =  { status : "success", description : "success" };


            try {

            // Notice Here We are Converting to JSON String For AJAX POST
            JSONContentItem = JSON.stringify(ContactRequest)

            $.ajax({
                type: "POST",
                url: ContentServiceEndpoint,
                data: JSONContentItem,
                contentType: "application/json; charset=utf-8",  // content type sent to server
                dataType: "json",         //Expected data format from server
                processData: true,
                async: false,
                error: function (xhr) {

                    if (xhr.status == "200") {


                        Result = { status: "success", description: "success", data: true };

                    }
                    else {

                        Result = { status: "fail", description: "An error occured: " + xhr.status + " " + xhr.statusText, data: false };

                        
                    }
                },
                success: function (result) {


                    Result = { status: "success", description: "success", data: true };


                }

            });

    }
   catch (e) {

       throw {
           source: "AddContactRequest",
           message: "Error: " + e
       }
    }
       
    return Result;


  }

        return {
        
            AddContactRequest: AddContactRequest

        }
        
    }


})();
(function () {

    'use strict'

    AngularApplication.service("content_service", ["$log", "$http", "utility_service", content_service]);

    function content_service( $log, $http,  utility_service) {

     
        function GetContentItems(ContentItemAreaID) {

            var ContentServiceEndpoint = utility_service.GetBaseURL() + "/ContentService/Content/GetActive?caid=" + ContentItemAreaID + "&icp=false";
            var ContentItemsJSON = null;
            var Result = null;


            try {


                $.ajax({
                    type: "GET",
                    dataType: "json",         //Expected data format from server
                    url: ContentServiceEndpoint,
                    async: false,
                    error: function (xhr) {

                        Result = { status: "fail", description: "An error occured: " + xhr.status + " " + xhr.statusText, data: null };

                    },
                    success: function (result) {

                        Result = { status: "success", description: "success", data: result };

                    }


                });

            }
            catch (e) {

                throw {
                    source: "GetContentItems",
                    message: "Error: " + e
                }

            }
            

            return Result;

        }

        function GetContentItem(ContentItemID) {

            var ContentItemJSON = null;
            var ContentServiceEndpoint = utility_service.GetBaseURL() + "/ContentService/Content/Select?cid=" + ContentItemID;
            var Result = null;

            try {

                $.ajax({
                    type: "GET",
                    dataType: "json",         //Expected data format from server
                    url: ContentServiceEndpoint,
                    async: false,
                    error: function (xhr) {

                        Result = { status: "fail", description: "An error occured: " + xhr.status + " " + xhr.statusText, data: null };

                    },
                    success: function (result) {

                        
                        Result = { status: "success", description: "success", data: result };


                    }
                });



            }
            catch (e) {

                  throw {
                      source: "GetContentItem",
                      message: "Error: " + e
                  }

              }
            

            return Result;

        }


        function UpdateContentItem(ContentItem) {

          

          
            var ContentServiceEndpoint = utility_service.GetBaseURL() + "/ContentService/Content/Update";
            var JSONContentItem = null;
            
            var Result = null;



            try {


                JSONContentItem = JSON.stringify(ContentItem)


            $.ajax({
                type: "POST",
                url: ContentServiceEndpoint,
                data: JSONContentItem,
                contentType: "application/json; charset=utf-8",  // content type sent to server
                dataType: "json",         //Expected data format from server
                processData: true,
                async: false,
                error: function (xhr) {

                    if (xhr.status == "200") {

                        Result = { status: "success", description: "success", data: true };

                    }
                    else {

                        Result = { status: "fail", description: "An error occured: " + xhr.status + " " + xhr.statusText, data: false };

                    }
                },
                success: function (result) {


                    Result = { status: "success", description: "success", data: true };
                    

                }

            });

    }
   catch (e) {

        throw {
            source: "UpdateContentItem",
            message: "Error: " + e
        }
    }
       
    return Result;


}




        function AddContentItem(ContentItem) {


            
            var ContentServiceEndpoint = utility_service.GetBaseURL() + "/ContentService/Content/Add";
            var JSONContentItem = null;
            var Result = null;





            try {


                JSONContentItem = JSON.stringify(ContentItem)


                $.ajax({
                    type: "POST",
                    url: ContentServiceEndpoint,
                    data: JSONContentItem,
                    contentType: "application/json; charset=utf-8",  // content type sent to server
                    dataType: "json",         //Expected data format from server
                    processData: true,
                    async: false,
                    error: function (xhr) {


                        if (xhr.status == "200") {


                            Result = { status: "success", description: "success", data: true };


                        }
                        else {
                            Result = { status: "fail", description: "An error occured: " + xhr.status + " " + xhr.statusText, data: false };
                        }
                    },
                    success: function (result) {

                        
                        Result = { status: "success", description: "success", data: true };

                    }

                });

            }
            catch (e) {

                throw {
                    source: "AddContentItem",
                    message: "Error: " + e
                }

            }

            return Result;

        }


        function DeleteContentItem(ContentItem) {
            
            var JSONContentItem = null;
            

            var Result = null;
            var ContentServiceEndpoint = utility_service.GetBaseURL() + "/ContentService/Content/Update";

            try {


                JSONContentItem = JSON.stringify(ContentItem)


                $.ajax({
                    type: "POST",
                    url: ContentServiceEndpoint,
                    data: JSONContentItem,
                    contentType: "application/json; charset=utf-8",  // content type sent to server
                    dataType: "json",         //Expected data format from server
                    processData: true,
                    async: false,
                    error: function (xhr) {

                        if (xhr.status == "200") {

                            Result = { status: "success", description: "success", data: true };

                        }
                        else {
                            Result = { status: "fail", description: "An error occured: " + xhr.status + " " + xhr.statusText, data: false };
                        }
                    },
                    success: function (result) {

                        Result = { status: "success", description: "success", data: true };                      
                    }

                });

            }
            catch (e) {

                throw {
                    source: "DeleteContentItem",
                    message: "Error: " + e
                }

            }

            return Result;

        }



        return {
        
            GetContentItems: GetContentItems,
            GetContentItem: GetContentItem,
            UpdateContentItem: UpdateContentItem,
            AddContentItem: AddContentItem,
            DeleteContentItem: DeleteContentItem

        }
        
    }


   




})();
(function () {

    'use strict'

    AngularApplication.service("navigation_service", ["$log", "$http", "utility_service", navigation_service]);

    function navigation_service( $log, $http,  utility_service) {

        
        function BuildSideBarMenu() {

            
            var KendoParsedJSON = null;
            var Result = null;


            try {

                KendoParsedJSON = [
                        {
                            text: "Monaco Software Solutions", expanded: true, imageUrl: "./images/Folder_Icon_16.png",
                            items: [
                                { text: "Facebook Page", imageUrl: "./images/Sites-icon_16.png", url: "https://www.facebook.com/monacosoftwaresolutions", encoded: "true"  },
                                { text: "Twitter Page", imageUrl: "./images/Sites-icon_16.png", url: "https://twitter.com/monacosoftware", encoded: "true" }
                            ]
                        },
                        {
                            text: "Software Development Resources", expanded: true, imageUrl: "./images/Folder_Icon_16.png",
                            items: [
                                { text: "MSDN", imageUrl: "./images/Sites-icon_16.png", url: "http://msdn.microsoft.com/en-US/", encoded: "true" },
                                { text: "MS.NET", imageUrl: "./images/Sites-icon_16.png", url: "https://www.microsoft.com/net", encoded: "true" },
                                { text: "ASP.NET", imageUrl: "./images/Sites-icon_16.png", url: "http://www.asp.net/", encoded: "true" },
                                { text: "Visual Studio", imageUrl: "./images/Sites-icon_16.png", url: "https://docs.microsoft.com/en-us/visualstudio/#pivot=workloads&panel=windows", encoded: "true" }
                            ]
                        },
                        {
                            text: "Cloud Developer Resources", expanded: true, imageUrl: "./images/Folder_Icon_16.png",
                            items: [
                                { text: "Amazon Cloud Services", imageUrl: "./images/Sites-icon_16.png", url: "https://aws.amazon.com/", encoded: "true" },
                                { text: "Microsoft Azure Developer", imageUrl: "./images/Sites-icon_16.png", url: "https://developer.amazon.com/", encoded: "true" },
                                { text: "Microsoft Azure", imageUrl: "./images/Sites-icon_16.png", url: "https://azure.microsoft.com/en-us/", encoded: "true" },
                                { text: "Microsoft Azure Portal", imageUrl: "./images/Sites-icon_16.png", url: "https://portal.azure.com/", encoded: "true" }

                            ]
                        }
                ];

                


                Result = { status: "success", description: "success", data: KendoParsedJSON };



            }
            catch (e) {

                throw {
                    source: "BuildSideBarMenu",
                    message: "Error: " + e
                }

            }
            
            return  Result;

        }
        


        function BuildMenu(rebuild) {

            // Get Menu and don't Rebuild From Authentication Unless Necessary

            try {



                var RestServiceEndpoint = utility_service.GetBaseURL() + "/NavigationSystemService/GetHeaderMenu?chka=" + rebuild;
                var KendoMenuJSON = null;
                var KendoParsedJSON = null;
                var Result = null;



                $.ajax({
                    dataType: "json",
                    url: RestServiceEndpoint,
                    async: false,
                    timeout: 30000,
                    error: function (xhr, textStatus, errorThrown) {

                      
                        Result = { status: "fail", description: "An error occured: " + xhr.status + " " + xhr.statusText, data: null };

                        KendoMenuJSON = { dataSource: [{ text: 'Home', imageUrl: '/images//globe.png', url: 'Default.aspx' }] };                      

                    },
                    success: function (result) {

                     
                        KendoMenuJSON = result;

                        if (KendoMenuJSON != null) {
                           
                            // This Works!!!
                            //KendoMenuJSON = '{ "text": "Home", "imageUrl" : "/images//globe.png", "url": "Default.aspx" }';

                            KendoParsedJSON = (JSON && JSON.parse(KendoMenuJSON)) || $.parseJSON(KendoMenuJSON);
                            
                            Result = { status: "success", description: "success", data: KendoParsedJSON };
                        }
                        else
                        {

                            Result = { status: "fail", description: "An error occured: No Menu JSON returned",  data: null };

                        }
                      


                    }
                });

            }
            catch (e) {

                throw {
                    source: "BuildMenu",
                    message: "Error: " + e
                }

            }

            return Result;

        }

        
        return {
        
            BuildSideBarMenu : BuildSideBarMenu,
            BuildMenu : BuildMenu
        
        }
        
    }

   





})();
(function () {

    'use strict'

    AngularApplication.service("security_service", ["$rootScope", "$log", "$http", "utility_service", security_service]);

    function security_service($rootScope, $log, $http, utility_service) {

        // Events For Page or Component Controllers To Subscribe To

        function Subscribe_logout_event(scope, callback) {
            var handler = $rootScope.$on('security-service-event-logout', callback);
            scope.$on('$destroy', handler);
        }

        function Subscribe_login_event (scope, callback) {
            var handler = $rootScope.$on('security-service-event-login', callback);
            scope.$on('$destroy', handler);
        }


        function LoginUser(strUserName, strPassword) {

            var RestServiceEndpoint = utility_service.GetBaseURL() + "/SecurityService/Login?un=" + strUserName + "&pw=" + strPassword;
            var Result = null;
            var LoginResponse = null;

            try {

                $.ajax({
                    dataType: "json",
                    url: RestServiceEndpoint,
                    async: false,
                    error: function (xhr) {

                        Result = { status: "fail", description: "An error occured: " + xhr.status + " " + xhr.statusText, data: null };

                    },
                    success: function (result) {

                        LoginResponse = eval(result);

                        if (LoginResponse == true) {

                            
                            // Authentication May Have Changed Rebuild Menu
                            // Will Cause Menu Component To Rebuild It's Menu Only
                            // But Not Displat Until Home Page Redirect after Login
                            $rootScope.$emit('security-service-event-login');

                            Result = { status: "success", description: "success", data: true };


                        }
                        else {

                            Result = { status: "success", description: "success", data: false };

                        }
                    }


                });
            }
            catch (e) {

                throw {
                    source: "LoginUser",
                    message: "Error: " + e
                }

            }

            return Result;


        }



        function LogoutUser () {


            var RestServiceEndpoint = utility_service.GetBaseURL() + "/SecurityService/Logout";
            var Result = null;


            var LogoutResponse = null;

            try {
                $.ajax({
                    dataType: "json",
                    url: RestServiceEndpoint,
                    async: false,
                    error: function (xhr) {


                        Result = { status: "fail", description: "An error occured: " + xhr.status + " " + xhr.statusText, data: null };
                        
                    },
                    success: function (result) {

                        LogoutResponse = eval(result);

                        if (LogoutResponse == true) {


                            Result = { status: "success", description: "success", data: true };

                         

                            // Authentication May Have Changed Rebuild Menu
                            // navigation_service.BuildMenu(true);
                            utility_service.DelayRun(utility_service.NavigateHome, 3);


                            // Service Event
                            $rootScope.$emit('security-service-event-logout');


                        }
                        else {


                            Result = { status: "success", description: "success", data: false };

                           
                            // Authentication Not Changed Get Latest Menu
                            // navigation_service.BuildMenu(false);



                        }
                    }


                });
            }
            catch (e) {

                throw {
                    source: "LogoutUser",
                    message: "Error: " + e
                }

            }

            return Result;

        }

        function GetLoggedInStatus() {


            try {
                var RestServiceEndpoint = utility_service.GetBaseURL() + "/SecurityService/GetLogInStatus";
                var bolLoggedInStatus = false;
                var Result = null;


                $.ajax({
                    dataType: "json",
                    url: RestServiceEndpoint,
                    async: false,
                    error: function (xhr) {

                        Result = { status: "fail", description: "An error occured: " + xhr.status + " " + xhr.statusText, data: false };

                    },
                    success: function (result) {

                        bolLoggedInStatus = result;

                        Result = { status: "success", description: "success", data: bolLoggedInStatus };

                    }

                });
            }
            catch (e) {

                throw {
                    source: "GetLoggedInStatus",
                    message: "Error: " + e
                }

            }
            return Result;

        }


        function GetLoggedInStatusRole(RoleName) {


            try {
                // GetLogInStatusRole?rn={RoleName}
                var RestServiceEndpoint = utility_service.GetBaseURL() + "/SecurityService/GetLogInStatusRole?rn=" + RoleName;
                var bolLoggedInStatus = false;
                var Result = null;


                $.ajax({
                    dataType: "json",
                    url: RestServiceEndpoint,
                    async: false,
                    error: function (xhr) {

                        Result = { status: "fail", description: "An error occured: " + xhr.status + " " + xhr.statusText, data: false };

                    },
                    success: function (result) {

                        bolLoggedInStatus = result;


                        Result = { status: "success", description: "success", data: bolLoggedInStatus };



                    }

                });
            }
            catch (e) {

                throw {
                    source: "GetLoggedInStatusRole",
                    message: "Error: " + e
                }

            }
            return Result;

        }



       

        return {

            LogoutUser: LogoutUser,
            LoginUser: LoginUser,
            GetLoggedInStatusRole: GetLoggedInStatusRole,
            GetLoggedInStatus: GetLoggedInStatus,
            Subscribe_login_event : Subscribe_login_event,
            Subscribe_logout_event : Subscribe_logout_event


        }

    }

   





})();
(function () {

    'use strict'

    AngularApplication.service("timer_service", ["$timeout", "$log", timer_service]);

    function timer_service($timeout, $log) {




        /* Define Function Prototype ( Class Here ) */

        // FYI You are Definining A Time "Class" Here if You Will
        // Then this Service Returns Instance of this Class

        // Constructor
        function Timer(callback, duration, invokeApply) {


            //$log.debug("Timer Constructor");

            // Prototype Properties
            this._callback = callback;
            this._duration = (duration || 0);
            this._invokeApply = (invokeApply !== false);
            this._timer = null;


        }

        // Define a Timer Prototype Pseudo Class

        // Start 

        Timer.prototype.constructor = Timer;

        Timer.prototype.isActive = function ()
        {

            return (!!this._timer);

        }

        Timer.prototype.restart = function () {


            //$log.debug("Timer Restart");

            this.stop();
            this.start();

        }

        Timer.prototype.start = function () {


            //$log.debug("Timer Start");

            var self = this;

            this._timer = $timeout(


                function handleTimeCallBack() {

                    try {


                        if (self._callback != null) {
                            self._callback.call(null);
                        }
                        else {

                            $log.debug("Callback NULL")

                        }

                        

                    }
                    finally {

                        self.start();


                    }

                }

        
        

                , this._duration, this._invokeApply);



        }

        Timer.prototype.stop = function () {

            //$log.debug("Timer Stop");

            $timeout.cancel(this._timer);

            this._timer = null;

        }


        Timer.prototype.close = function () {


            //$log.debug("Timer Close");

            this.stop();
            this._callback = null;
            this._duration = null;
            this._invokeApply = null;
            this._timer = null;

        }

        // End 


        // Factory Method This Returns Instances of a Timer
        // The factory is Dependency Injected and then allows one to initialize 
        // More Then One Timer
        function timerFactory(callback, duration, invokeApply) {
            return (new Timer(callback, duration, invokeApply));
        }


        // TimeBased Constants - Not Needed - Here For Reference
        //timerFactory.ONE_SECOND = (1 * 1000);



        return (timerFactory);



    }

   





})();
(function () {

    'use strict'


    AngularApplication.service("utility_service", ["$log", "$http", "rootUrl", utility_service]);

    function utility_service($log, $http, rootUrl) {


        var KendoWindowRef = null;


        function GetBaseURL() {
                     
            // Note rootURL is a application constant that is depedency injected into this service
            return rootUrl;

        }

        function GetParam(name) {
            if (name = (new RegExp('[?&]' + encodeURIComponent(name) + '=([^&]*)')).exec(location.search))
                return decodeURIComponent(name[1]);
        }

        function NotificationDialog(Notification_dlg_title, Notification_msg) {

            var kendoWindow = $("<div />").kendoWindow({
                title: Notification_dlg_title,
                resizable: false,
                modal: true
            });

            kendoWindow.data("kendoWindow")
                .content($("#notification_dialog").html())
                .center().open();

            KendoWindowRef = kendoWindow;

            var objconfirmation_msg = kendoWindow.find("#notification_msg")

            objconfirmation_msg[0].innerHTML = Notification_msg;

            kendoWindow
                .find(".ok-button")
                    .click(function () {


                        kendoWindow.data("kendoWindow").close();


                    })
                    .end()

        }


        function NotificationPopupDialog(Notification_dlg_title, Notification_msg, opentime) {

            var kendoWindow = $("<div />").kendoWindow({
                title: Notification_dlg_title,
                resizable: false,
                modal: true
            });


            kendoWindow.data("kendoWindow")
                .content($("#notification_popup_dialog").html())
                .center().open();

            KendoWindowRef = kendoWindow;


            var objconfirmation_msg = kendoWindow.find("#notification_msg")

            objconfirmation_msg[0].innerHTML = Notification_msg;

            setTimeout(function () {

                KendoWindowRef.data("kendoWindow").close();

            }, opentime * 1000);

        }


        function NotificationPopupDialogWithHandler(Notification_dlg_title, Notification_msg, opentime, handler ) {

            var kendoWindow = $("<div />").kendoWindow({
                title: Notification_dlg_title,
                resizable: false,
                modal: true
            });


            kendoWindow.data("kendoWindow")
                .content($("#notification_popup_dialog").html())
                .center().open();

            KendoWindowRef = kendoWindow;


            var objconfirmation_msg = kendoWindow.find("#notification_msg")

            objconfirmation_msg[0].innerHTML = Notification_msg;

            setTimeout(function () {

                KendoWindowRef.data("kendoWindow").close();

            }, opentime * 1000);


            setTimeout(  handler, (opentime+2) * 1000);

        }



        function ExceptionPopUpDialog(exception_src, exception_msg, opentime) {

            var confirmation_dlg_title = "Site Exception Occurred";

            var kendoWindow = $("<div />").kendoWindow({
                title: confirmation_dlg_title,
                resizable: false,
                modal: true
            });

            kendoWindow.data("kendoWindow")
               .content($("#exception_dialog").html())
               .center().open();


            var objexception_msg = kendoWindow.find("#exception_msg")

            objexception_msg[0].innerHTML = exception_msg;

            var objexception_src = kendoWindow.find("#exception_src")

            objexception_src[0].innerHTML = exception_src;


            KendoWindowRef = kendoWindow;


            setTimeout(function () {

                KendoWindowRef.data("kendoWindow").close();

            }, opentime * 1000);


        }


        function DelayRun(FuncPtr, DelayTime) {

            setTimeout(FuncPtr, DelayTime * 1000);

        }


     
        function GetSessionID() {


            var RestServiceEndpoint = site.GetBaseURL() + "/SecurityService/GetSessionID";
            var SessionID = null;

            try {

                $.ajax({
                    dataType: "json",
                    async: false,
                    url: RestServiceEndpoint, error: function (xhr) {

                        this.ExceptionPopUpDialog("GetSessionID ", "An error occured: " + xhr.status + " " + xhr.statusText, 5);
                    },
                    success: function (result) {

                        SessionID = result
                        //alert("SessionID: " + $scope.SessionID );

                        return SessionID;
                    }


                });
            }
            catch (e) {

                throw {
                    source: "GetSessionID",
                    message: "Error: " + e
                }

            }
        }

        function NavigateHome() {

            PageRedirect(GetBaseURL() + "/Home");

        }

        function PageRedirect(RedirectPage) {

            window.location.replace(RedirectPage);

        }

        function PopUpWindow(url, title, width, height) {
            var leftPosition, topPosition;
            //Allow for borders.
            leftPosition = (window.screen.width / 2) - ((width / 2) + 10);
            //Allow for title and status bars.
            topPosition = (window.screen.height / 2) - ((height / 2) + 50);
            //Open the window.
            window.open(url, title,
            "status=no,height=" + height + ",width=" + width + ",resizable=yes,left="
            + leftPosition + ",top=" + topPosition + ",screenX=" + leftPosition + ",screenY="
            + topPosition + ",toolbar=no,menubar=no,scrollbars=yes,location=no,directories=no");
        }



        return{

            GetBaseURL: GetBaseURL,
            NotificationDialog: NotificationDialog,
            ExceptionPopUpDialog: ExceptionPopUpDialog,
            NotificationPopupDialog: NotificationPopupDialog,
            NotificationPopupDialogWithHandler: NotificationPopupDialogWithHandler,
            GetParam: GetParam,
            DelayRun: DelayRun,
            GetSessionID: GetSessionID,
            NavigateHome: NavigateHome,
            PopUpWindow: PopUpWindow,
            PageRedirect: PageRedirect


        }


    }

   





})();